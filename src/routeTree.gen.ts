/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as UnprotectedRouteImport } from './routes/_unprotected/route'
import { Route as ProtectedRouteImport } from './routes/_protected/route'
import { Route as ProtectedIndexImport } from './routes/_protected/index'
import { Route as UnprotectedLogoutImport } from './routes/_unprotected/logout'
import { Route as UnprotectedLoginImport } from './routes/_unprotected/login'
import { Route as ProtectedAccountImport } from './routes/_protected/account'

// Create/Update Routes

const UnprotectedRouteRoute = UnprotectedRouteImport.update({
  id: '/_unprotected',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedRouteRoute = ProtectedRouteImport.update({
  id: '/_protected',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedIndexRoute = ProtectedIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProtectedRouteRoute,
} as any)

const UnprotectedLogoutRoute = UnprotectedLogoutImport.update({
  id: '/logout',
  path: '/logout',
  getParentRoute: () => UnprotectedRouteRoute,
} as any)

const UnprotectedLoginRoute = UnprotectedLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => UnprotectedRouteRoute,
} as any)

const ProtectedAccountRoute = ProtectedAccountImport.update({
  id: '/account',
  path: '/account',
  getParentRoute: () => ProtectedRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedRouteImport
      parentRoute: typeof rootRoute
    }
    '/_unprotected': {
      id: '/_unprotected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof UnprotectedRouteImport
      parentRoute: typeof rootRoute
    }
    '/_protected/account': {
      id: '/_protected/account'
      path: '/account'
      fullPath: '/account'
      preLoaderRoute: typeof ProtectedAccountImport
      parentRoute: typeof ProtectedRouteImport
    }
    '/_unprotected/login': {
      id: '/_unprotected/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof UnprotectedLoginImport
      parentRoute: typeof UnprotectedRouteImport
    }
    '/_unprotected/logout': {
      id: '/_unprotected/logout'
      path: '/logout'
      fullPath: '/logout'
      preLoaderRoute: typeof UnprotectedLogoutImport
      parentRoute: typeof UnprotectedRouteImport
    }
    '/_protected/': {
      id: '/_protected/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof ProtectedIndexImport
      parentRoute: typeof ProtectedRouteImport
    }
  }
}

// Create and export the route tree

interface ProtectedRouteRouteChildren {
  ProtectedAccountRoute: typeof ProtectedAccountRoute
  ProtectedIndexRoute: typeof ProtectedIndexRoute
}

const ProtectedRouteRouteChildren: ProtectedRouteRouteChildren = {
  ProtectedAccountRoute: ProtectedAccountRoute,
  ProtectedIndexRoute: ProtectedIndexRoute,
}

const ProtectedRouteRouteWithChildren = ProtectedRouteRoute._addFileChildren(
  ProtectedRouteRouteChildren,
)

interface UnprotectedRouteRouteChildren {
  UnprotectedLoginRoute: typeof UnprotectedLoginRoute
  UnprotectedLogoutRoute: typeof UnprotectedLogoutRoute
}

const UnprotectedRouteRouteChildren: UnprotectedRouteRouteChildren = {
  UnprotectedLoginRoute: UnprotectedLoginRoute,
  UnprotectedLogoutRoute: UnprotectedLogoutRoute,
}

const UnprotectedRouteRouteWithChildren =
  UnprotectedRouteRoute._addFileChildren(UnprotectedRouteRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof UnprotectedRouteRouteWithChildren
  '/account': typeof ProtectedAccountRoute
  '/login': typeof UnprotectedLoginRoute
  '/logout': typeof UnprotectedLogoutRoute
  '/': typeof ProtectedIndexRoute
}

export interface FileRoutesByTo {
  '': typeof UnprotectedRouteRouteWithChildren
  '/account': typeof ProtectedAccountRoute
  '/login': typeof UnprotectedLoginRoute
  '/logout': typeof UnprotectedLogoutRoute
  '/': typeof ProtectedIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_protected': typeof ProtectedRouteRouteWithChildren
  '/_unprotected': typeof UnprotectedRouteRouteWithChildren
  '/_protected/account': typeof ProtectedAccountRoute
  '/_unprotected/login': typeof UnprotectedLoginRoute
  '/_unprotected/logout': typeof UnprotectedLogoutRoute
  '/_protected/': typeof ProtectedIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/account' | '/login' | '/logout' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '' | '/account' | '/login' | '/logout' | '/'
  id:
    | '__root__'
    | '/_protected'
    | '/_unprotected'
    | '/_protected/account'
    | '/_unprotected/login'
    | '/_unprotected/logout'
    | '/_protected/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  ProtectedRouteRoute: typeof ProtectedRouteRouteWithChildren
  UnprotectedRouteRoute: typeof UnprotectedRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  ProtectedRouteRoute: ProtectedRouteRouteWithChildren,
  UnprotectedRouteRoute: UnprotectedRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_protected",
        "/_unprotected"
      ]
    },
    "/_protected": {
      "filePath": "_protected/route.tsx",
      "children": [
        "/_protected/account",
        "/_protected/"
      ]
    },
    "/_unprotected": {
      "filePath": "_unprotected/route.tsx",
      "children": [
        "/_unprotected/login",
        "/_unprotected/logout"
      ]
    },
    "/_protected/account": {
      "filePath": "_protected/account.tsx",
      "parent": "/_protected"
    },
    "/_unprotected/login": {
      "filePath": "_unprotected/login.tsx",
      "parent": "/_unprotected"
    },
    "/_unprotected/logout": {
      "filePath": "_unprotected/logout.tsx",
      "parent": "/_unprotected"
    },
    "/_protected/": {
      "filePath": "_protected/index.tsx",
      "parent": "/_protected"
    }
  }
}
ROUTE_MANIFEST_END */
