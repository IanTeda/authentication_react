// @generated by protobuf-ts 2.9.6
// @generated from protobuf file "authentication.proto" (package "authentication", syntax proto3)
// tslint:disable
//
//-- ./proto/authentication.proto
//
//
/// Authentication Service Definitions
///
/// This file contains the service definitions for the authentication grpc 
/// service.
///
/// It includes definitions for:
/// - Login: Authenticate a login request
/// - Refresh: Using the refresh token, request a new access_token
/// - UpdatePassword: Update my password
/// - ResetPassword: Reset a password
/// - Register: Request registration on the server
/// - Logout: Remove my access and refresh tokens on the server
//
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { AuthenticationService } from "./authentication";
import type { LogoutResponse } from "./authentication";
import type { RegisterResponse } from "./authentication";
import type { RegisterRequest } from "./authentication";
import type { ResetPasswordResponse } from "./authentication";
import type { ResetPasswordRequest } from "./authentication";
import type { UpdatePasswordResponse } from "./authentication";
import type { UpdatePasswordRequest } from "./authentication";
import type { RefreshResponse } from "./authentication";
import type { Empty } from "./common";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { LoginResponse } from "./authentication";
import type { LoginRequest } from "./authentication";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Protobuf service definition
 *
 * @generated from protobuf service authentication.AuthenticationService
 */
export interface IAuthenticationServiceClient {
    /**
     * Request authorisation using and email and password
     *
     * @generated from protobuf rpc: Login(authentication.LoginRequest) returns (authentication.LoginResponse);
     */
    login(input: LoginRequest, options?: RpcOptions): UnaryCall<LoginRequest, LoginResponse>;
    /**
     * Request a new access token, using a current refresh token sent in header
     *
     * @generated from protobuf rpc: Refresh(authentication.Empty) returns (authentication.RefreshResponse);
     */
    refresh(input: Empty, options?: RpcOptions): UnaryCall<Empty, RefreshResponse>;
    /**
     * Update my current password. Service requires a valid access token
     *
     * @generated from protobuf rpc: UpdatePassword(authentication.UpdatePasswordRequest) returns (authentication.UpdatePasswordResponse);
     */
    updatePassword(input: UpdatePasswordRequest, options?: RpcOptions): UnaryCall<UpdatePasswordRequest, UpdatePasswordResponse>;
    /**
     * Reset my password. Service sends a reset password email.
     *
     * @generated from protobuf rpc: ResetPassword(authentication.ResetPasswordRequest) returns (authentication.ResetPasswordResponse);
     */
    resetPassword(input: ResetPasswordRequest, options?: RpcOptions): UnaryCall<ResetPasswordRequest, ResetPasswordResponse>;
    /**
     * Request registration. Service requires admin authorisation.
     *
     * @generated from protobuf rpc: Register(authentication.RegisterRequest) returns (authentication.RegisterResponse);
     */
    register(input: RegisterRequest, options?: RpcOptions): UnaryCall<RegisterRequest, RegisterResponse>;
    /**
     * Invalidate my access and reset tokens in the service
     *
     * @generated from protobuf rpc: Logout(authentication.Empty) returns (authentication.LogoutResponse);
     */
    logout(input: Empty, options?: RpcOptions): UnaryCall<Empty, LogoutResponse>;
}
/**
 * Protobuf service definition
 *
 * @generated from protobuf service authentication.AuthenticationService
 */
export class AuthenticationServiceClient implements IAuthenticationServiceClient, ServiceInfo {
    typeName = AuthenticationService.typeName;
    methods = AuthenticationService.methods;
    options = AuthenticationService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Request authorisation using and email and password
     *
     * @generated from protobuf rpc: Login(authentication.LoginRequest) returns (authentication.LoginResponse);
     */
    login(input: LoginRequest, options?: RpcOptions): UnaryCall<LoginRequest, LoginResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<LoginRequest, LoginResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Request a new access token, using a current refresh token sent in header
     *
     * @generated from protobuf rpc: Refresh(authentication.Empty) returns (authentication.RefreshResponse);
     */
    refresh(input: Empty, options?: RpcOptions): UnaryCall<Empty, RefreshResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, RefreshResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Update my current password. Service requires a valid access token
     *
     * @generated from protobuf rpc: UpdatePassword(authentication.UpdatePasswordRequest) returns (authentication.UpdatePasswordResponse);
     */
    updatePassword(input: UpdatePasswordRequest, options?: RpcOptions): UnaryCall<UpdatePasswordRequest, UpdatePasswordResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdatePasswordRequest, UpdatePasswordResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Reset my password. Service sends a reset password email.
     *
     * @generated from protobuf rpc: ResetPassword(authentication.ResetPasswordRequest) returns (authentication.ResetPasswordResponse);
     */
    resetPassword(input: ResetPasswordRequest, options?: RpcOptions): UnaryCall<ResetPasswordRequest, ResetPasswordResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<ResetPasswordRequest, ResetPasswordResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Request registration. Service requires admin authorisation.
     *
     * @generated from protobuf rpc: Register(authentication.RegisterRequest) returns (authentication.RegisterResponse);
     */
    register(input: RegisterRequest, options?: RpcOptions): UnaryCall<RegisterRequest, RegisterResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<RegisterRequest, RegisterResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Invalidate my access and reset tokens in the service
     *
     * @generated from protobuf rpc: Logout(authentication.Empty) returns (authentication.LogoutResponse);
     */
    logout(input: Empty, options?: RpcOptions): UnaryCall<Empty, LogoutResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, LogoutResponse>("unary", this._transport, method, opt, input);
    }
}
